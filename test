void	minishell_start(t_msh *msh, int ac, char **envp);
void	minishell_running(t_msh *msh);
void	check_if_exit(t_msh *msh);
void	clean_init_chds(t_pipex *chds);
void	clean_init_parse(t_parse *pars);
void	clean_init_token_node(t_token *tkn);
void	clean_init_pexe_node(t_pexe *pexe);
void	clean_msh_init(t_msh *msh);
void	adding_temp_var(t_msh *msh, char *new_var);
void	check_update_tempenv(t_msh *msh, char *cmd);
void	check_remove_tempenv(t_msh *msh, char *cmd);
void	execution(t_msh *msh);
void	check_type(t_msh *msh);
void	check_builtin_cmd(t_msh *msh, char *cmd);
void	check_exit_status_cmd(t_msh *msh, char *cmd);
void	double_red_right(t_msh *msh);
void	red_left(t_msh *msh);
void	red_right(t_msh *msh);
void	ft_pipex(t_msh *msh);
void	signals_handler(int sig);
void	signal_handler_init(t_msh *msh);
void	chd1_fork(t_msh *msh, t_pipex *chds);
void	mdlchd_fork(t_msh *msh, t_pipex *prev_chds, t_pipex *chds);
void	lstchd_fork(t_msh *msh, t_pipex *prev_chds, t_pipex *chds);
void	kill_children(t_pipex **chds);
void	closing(t_msh *msh, t_pipex **chds);
void	append_args(t_msh *msh, t_pexe *current, int len_group);
void	find_exe(t_msh *msh, char *cmd);
void	sigint(t_msh *msh);
void	sigeof(t_msh *msh);
void    cmd_exit(t_msh *msh);
void    cmd_echo(t_msh *msh, int g);
void	cmd_pwd(t_msh *msh);
void	cmd_cd(t_msh *msh, int g);
void	cmd_env(t_msh *msh, int g);
void	adding_var(t_msh *msh, char *new_var);
void	cmd_export(t_msh *msh, int g);
void	cmd_unset(t_msh *msh, int g);
void	parse_malloc(t_msh *msh);
void	request_more_input(t_msh *msh, t_parse *pars);
void	create_modified(t_msh *msh, t_parse *pars);
void	input_to_modified(t_msh *msh, t_parse *pars);
void	copy_input_mod(t_msh *msh, char *to_copy, int start, int end);
void	expand_dollars(t_msh *msh, int *i);
void	handle_paran(t_msh *msh, t_parse *pars, t_type type);
void	handle_logic(t_msh *msh, t_parse *pars, int *i, t_type type);
void	handle_pipes(t_msh *msh, t_parse *pars, t_type type);
void	handle_redir(t_msh *msh, t_parse *pars, int *i, t_type type);
void	handle_wild_character(t_msh *msh, int *i);
void	addnode(void *node, void **head, size_t offs_next, size_t offs_prev);
void	parse_tokenize(t_msh *msh, t_parse *prs);
void	handle_heredoc(t_msh *msh, int *i);
void	get_here_doc(t_msh *msh, char *delim, int flag);
void	remove_quotes(char *str, int len, char *delim);
void	check_for_here_dollar(t_msh *msh, char *gnl, int fd_temp, int flag);
void	make_pexe(t_msh *msh, t_parse *pars);
void	fill_pexe(t_msh *msh);
void	sort_pexe(t_msh *msh);
void	exit_cleanup(char *msg, t_msh *msh, int flag, int check);
void	free_parse(t_msh *msh);
void	free_pexe(t_msh *msh);
void	free_mallocs(void *s_ptr, void **d_ptr);
void	free_pipex(t_pipex **children);
void	clear_msh(t_msh *msh, int check, char *msg);
